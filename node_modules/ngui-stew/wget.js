/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2015, xuewen.chu
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of xuewen.chu nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL xuewen.chu BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ***** END LICENSE BLOCK ***** */

var util = require('./util');
var http = require('http');
var https = require('https');
var url = require('url');
var fs = require('fs');
var errno = require('./errno');
var { userAgent } = require('./request');

function wget(www, save) {
	return new Promise((resolve, reject)=> {
		var uri = url.parse(www);
		var isSSL = uri.protocol == 'https:';
		var lib =	isSSL ? https: http;
		var port = Number(uri.port) || (isSSL ? 443: 80);
		var path = uri.path;
		
		var options = {
			hostname: uri.hostname,
			port: port,
			path: path,
			method: 'GET',
			headers: {
				'User-Agent': userAgent,
			},
			rejectUnauthorized: false
		};

		if (isSSL) {
			options.agent = new https.Agent(options);
		}

		fs.open(save, 'w', function(err, fd) {
			if (err) {
				return reject(err);
			}

			function error(err) {
				if (fd) {
					var _fd = fd;
					fd = 0;
					fs.close(_fd, e=>{
						reject(err);
					});
				}
			}

			var req = lib.request(options, (res)=> {
				var end = false;
				var data = [];

				function write() {
					if (fd) {
						if (data.length) {
							fs.write(fd, data[0], function(err) {
								if (err) {
									error(err);
									req.abort();
								} else {
									data.shift();
									write();
								}
							});
						} else if (end) {
							fs.close(fd, e=>resolve(true));
						}
					}
				}
				
				if (res.statusCode == 200) {
					res.on('error', error);
					res.on('data', (chunk)=>{
						data.push(chunk);
						if (data.length == 1) {
							write();
						};
					});
					res.on('end', ()=>{
						end = true;
						if (!data.length) {
							write();
						}
					});
				} else {
					error(Error.new(errno.ERR_DOWNLOAD_FAIL));
					req.abort();
				}
			});

			req.on('abort', e=>console.log('wget abort'));
			req.on('error', error);
			req.end();
		});
	});
}

module.exports = wget;
