/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2015, xuewen.chu
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of xuewen.chu nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL xuewen.chu BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ***** END LICENSE BLOCK ***** */

var child_process = require('child_process');

function syscall(cmd) {
	var ch = child_process.spawnSync('sh', ['-c', cmd]);
	if (ch.status != 0) {
		if (ch.stderr.length) {
			console.error(ch.stderr.toString('utf8'));
		}
		if (ch.stdout.length) {
			console.log(ch.stdout.toString('utf8'));
		}
		console.log('status != 0 exit process')
		process.exit(ch.status);
	} else {
		return {
			code: ch.status,
			stdout: ch.stdout.length ? ch.stdout.toString().split('\n'): [],
			stderr: ch.stderr.length ? ch.stderr.toString().split('\n'): [],
		};
	}
}

function execSync(cmd) {
	// var ls = cmd.split(/\s+/);
	// var ch = child_process.spawnSync(ls.shift(), ls);
	var ch = child_process.spawnSync('sh', ['-c', cmd]);
	if (ch.error) {
		throw ch.error;
	} else {
		return {
			code: ch.status,
			stdout: ch.stdout.length ? ch.stdout.toString().split('\n'): [],
			stderr: ch.stderr.length ? ch.stderr.toString().split('\n'): [],
		};
	}
}

function exec(cmd) {
	return new Promise((resolve, reject)=>{
		// var ls = cmd.split(/\s+/);
		// var ch = child_process.spawn(ls.shift(), ls);
		var ch = child_process.spawn('sh', ['-c', cmd]);
		var error;
		var stdout = [];
		var stderr = [];

		ch.on('error', function(err) {
			error = err;
		});

		ch.stdout.on('data', function(e) {
			stdout.push(...e.toString('utf8').split('\n'));
		});

		ch.stderr.on('error', function(e) {
			stderr.push(...e.toString('utf8').split('\n'));
		});

		ch.on('close', function(code) {
			if (error) {
				reject(error);
			} else {
				resolve({ code, stdout, stderr });
			}
		});
	});
}

exports.syscall = syscall;
exports.execSync = execSync;
exports.exec = exec;

