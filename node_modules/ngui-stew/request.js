
var http = require('http');
var https = require('https');
var url = require('url');
var user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) \
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36';
var Buffer = require('buffer').Buffer;
var querystring = require('querystring');
var shared = null;

class Request {

	constructor(serverUrl, mock, mockSwitch) {
		this.m_user_agent = user_agent;
		this.m_server_url = serverUrl || 'http://localhost';
		this.m_mock = mock || {};
		this.m_mock_switch = mockSwitch;
		this.m_urlencoded = true;
		this.m_has_append_timespan = true;
	}

	get userAgent() { return this.m_user_agent }
	set userAgent(v) { this.m_user_agent = v }
	get urlencoded() { return this.m_urlencoded }
	set urlencoded(v) { this.m_urlencoded = v }
	get serverUrl() { return this.m_server_url }
	set serverUrl(v) { this.m_server_url = v }
	get mock() { return this.m_mock }
	set mock(v) { this.m_mock = v }
	get mockSwitch() { return this.m_mock_switch }
	set mockSwitch(v) { this.m_mock_switch = v }
	get appendTimespan() { return this.m_has_append_timespan }
	set appendTimespan(v) { this.m_has_append_timespan = v }

	parseResonseData(buf) {
		var json = buf.toString('utf8');
		// console.log(json);
		return JSON.parse(json);
	}

	request(name, method, params) {
    return new Promise((resolve, reject)=> {
			params = params || '';

			if (this.m_mock[name] && (!this.m_mock_switch || this.m_mock_switch[name])) {
				process.nextTick(()=> {
					resolve({...this.m_mock[name]});
				});
			} else {
				var timespanArg = '';
				if (this.m_has_append_timespan) {
					timespanArg = (name.indexOf('?') == -1 ? '?_=' : '&_=') + new Date().valueOf();
				}
				var uri = url.parse(this.m_server_url + '/' + name + timespanArg);
				var is_https = uri.protocol == 'https:';
				var lib =	is_https ? https: http;
				var port = Number(uri.port) || (is_https ? 443: 80);
		    var path = uri.path;
		    var headers = { 'User-Agent': this.m_user_agent };
		    var post_data = null;

				if (method == 'GET') {
					if (params) {
						path += (uri.search ? '&' : '?') + querystring.stringify(params);
					}
				} else {
					if (this.m_urlencoded) {
						headers['Content-Type'] = 'application/x-www-form-urlencoded';
						if (params)
							post_data = querystring.stringify(params);
					} else {
						if (params)
							post_data = JSON.stringify(params);
					}
					headers['Content-Length'] = post_data ? Buffer.byteLength(post_data) : 0;
				}

				var options = {
				  hostname: uri.hostname,
				  port: port,
				  path: path,
				  method: method,
				  headers: headers,
				  rejectUnauthorized: false
				};
				
				if (is_https) {
					options.agent = new https.Agent(options);
				}

				const req = lib.request(options, (res)=> {
				  // console.log(`STATUS: ${res.statusCode}`);
				  // console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
				  // res.setEncoding('utf8');
				  var data = null;
				  res.on('data', (chunk)=> {
				  	// console.log(`BODY: ${chunk}`);
				  	if (data) {
				  		data = Buffer.concat([data, chunk]);
				  	} else {
				  		data = chunk;
				  	}
				  });
				  res.on('end', ()=> {
				    // console.log('No more data in response.');
						resolve(this.parseResonseData(data));
				  });
				});

				req.on('error', (e)=> {
				  // console.error(`problem with request: ${e.message}`);
				  reject(e);
				});

				// write data to request body
				if (method == 'POST') {
					if (post_data)
						req.write(post_data);
				}
				req.end();
			}
    });
	}

	get(name, params) {
		return this.request(name, 'GET', params);
	}

	post(name, params) {
		return this.request(name, 'POST', params);
	}
}

async function request(name, method, params) {
	try {
		var res = await shared.request(name, method, params);
		if (res.code === 0) {
			return res.data;
		} else {
			throw Error.new(res, res.code);
		}
	} catch (err) {
		throw err;
	}
}

async function get(name, params) {
	return await request(name, 'GET', params);
}

async function post(name, params) {
	return await request(name, 'POST', params);
}

module.exports = {
	
	Request: Request,

	/**
	 * @func setShared
	 */
	setShared: function(req) {
		shared = req;
	},

	/**
	 * @get shared # default web server
	 */
	get shared() {
		return shared;
	},

	request: request,
	get: get, 
	post: post, 
};
