
var http = require('http');
var https = require('https');
var url = require('url');
var util = require('./util');
var user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) \
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36';
var Buffer = require('buffer').Buffer;
var querystring = require('querystring');
var shared = null;

var defaultOptions = {
	method: 'GET',
	params: '',
	headers : {}, 
	urlencoded : true, 
	user_agent : user_agent,
}

/**
 * @func request
 */
function request(pathname, options) {
	options = Object.assign({}, defaultOptions, options);

	return new Promise((resolve, reject)=> {
		var uri = url.parse(pathname);
		var is_https = uri.protocol == 'https:';
		var lib =	is_https ? https: http;
		var port = Number(uri.port) || (is_https ? 443: 80);
		var path = uri.path;
		var headers = {
			'User-Agent': options.user_agent,
			'Accept': 'application/json',
			...options.headers,
		};
		var post_data = null;
		var { params, method } = options;

		if (method == 'GET') {
			if (params) {
				path += (uri.search ? '&' : '?') + querystring.stringify(params);
			}
		} else {
			if (options.urlencoded) {
				headers['Content-Type'] = 'application/x-www-form-urlencoded';
				if (params) {
					post_data = querystring.stringify(params);
				}
			} else {
				headers['Content-Type'] = 'application/json';
				if (params) {
					post_data = JSON.stringify(params);
				}
			}
			headers['Content-Length'] = post_data ? Buffer.byteLength(post_data) : 0;
		}

		var send_options = {
			hostname: uri.hostname,
			port: port,
			path: path,
			method: method,
			headers: headers,
			rejectUnauthorized: false
		};
		
		if (is_https) {
			send_options.agent = new https.Agent(send_options);
		}

		var req = lib.request(send_options, (res)=> {
			// console.log(`STATUS: ${res.statusCode}`);
			// console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
			// res.setEncoding('utf8');
			var data = null;
			res.on('data', (chunk)=> {
				// console.log(`BODY: ${chunk}`);
				if (data) {
					data = Buffer.concat([data, chunk]);
				} else {
					data = chunk;
				}
			});
			res.on('end', ()=> {
				// console.log('No more data in response.');
				resolve(data);
			});
		});

		req.on('error', (e)=> {
			// console.error(`problem with request: ${e.message}`);
			reject(e);
		});

		// write data to request body
		if (method == 'POST') {
			if (post_data)
				req.write(post_data);
		}
		req.end();
	});
}

/**
 * @class Cache
 */
class Cache {

	constructor() {
		this.m_getscache = {};
	}

	has(key) {
		return name in this.m_getscache;
	}

	get(key) {
		var i = this.m_getscache[key];
		return i ? i : null;
	}

	set(key, data, cacheTiem) {
		var i = this.m_getscache[key];
		if (i) {
			var id = i.timeoutid;
			if (id) {
				clearTimeout(id);
			}
		}
		this.m_getscache[key] = {
			data: data,
			time: cacheTiem,
			timeoutid: cacheTiem ? setTimeout(e=>{
				delete this.m_getscache[key];
			}, cacheTiem): 0,
		}
	}

	static hash(object) {
		return util.hash(JSON.stringify(object));
	}

}

/**
 * @class Request
 */
class Request {

	constructor(serverURL, mock, mockSwitch) {
		this.m_user_agent = user_agent;
		this.m_server_url = serverURL || util.config.web_service || 'http://localhost';
		this.m_mock = mock || {};
		this.m_mock_switch = mockSwitch;
		this.m_urlencoded = true;
		this.m_enable_strict_response_data = false;
		this.m_cache = new Cache();
	}

	get userAgent() { return this.m_user_agent }
	set userAgent(v) { this.m_user_agent = v }
	get urlencoded() { return this.m_urlencoded }
	set urlencoded(v) { this.m_urlencoded = v }
	get serverURL() { return this.m_server_url }
	set serverURL(v) { this.m_server_url = v }
	get mock() { return this.m_mock }
	set mock(v) { this.m_mock = v }
	get mockSwitch() { return this.m_mock_switch }
	set mockSwitch(v) { this.m_mock_switch = v }
	get enableStrictResponseData() { return this.m_enable_strict_response_data }
	set enableStrictResponseData(value) { this.m_enable_strict_response_data = value }

	parseResponseData(buf) {
		var json = buf.toString('utf8');
		var res = JSON.parse(json);
		if (this.m_enable_strict_response_data) {
			if (res.code === 0) {
				return res.data;
			} else {
				throw Error.new(res, res.code);
			}
		} else {
			return res;
		}
	}

	async request(name, method = 'GET', params = {}, headers = {}) {
		if (this.m_mock[name] && (!this.m_mock_switch || this.m_mock_switch[name])) {
			return { ...this.m_mock[name] };
		} else {
			var url = this.m_server_url + '/' + name;
			var data = await request(url, { 
				method, params, headers,
				urlencoded: this.m_urlencoded,
				user_agent: this.m_user_agent,
			});
			try {
				return this.parseResponseData(data);
			} catch(err) {
				err.description = data.toString('utf-8');
				throw err;
			}
		}
	}

	async get(name, params, headers, cacheTime = 0) {
		if (typeof headers == 'number') {
			cacheTime = headers;
			headers = {};
		}
		var key = Cache.hash({ name: name, params: params });
		var cache = this.m_cache.get(key);
		if (cacheTime) {
			if (cache) {
				return cache.data;
			}
			var data = await this.request(name, 'GET', params, headers);
			this.m_cache.set(key, data, cacheTime);
			return data;
		} else {
			var data = await this.request(name, 'GET', params, headers);
			if (cache) {
				this.m_cache.set(key, data, cache.time);
			}
			return data;
		}
	}

	post(name, params, headers) {
		return this.request(name, 'POST', params, headers);
	}
	
	call(name, params, headers) {
		return this.post(name, params, headers);
	}
}

module.exports = {
	
	Request: Request,

	/**
	 * @get userAgent
	 */
	get userAgent() { return user_agent },

	/**
	 * @func setShared()
	 */
	setShared: function(req) {
		shared = req;
	},

	/**
	 * @get shared # default web server
	 */
	get shared() { return shared },

	/**
	 * @func request()
	 */
	request: request,

	/**
	 * @func get()
	 */
	get: function(url, options) {
		return request(url, Object.assign({}, options, { method: 'GET' }));
	},

	/**
	 * @func post()
	 */
	post: function(url, options) {
		return request(url, Object.assign({}, options, { method: 'POST' }));
	},

};
