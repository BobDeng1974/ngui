
var http = require('http');
var https = require('https');
var url = require('url');
var user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) \
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36';
var Buffer = require('buffer').Buffer;
var querystring = require('querystring');

class Request {

	constructor(serverUrl, mock, mockSwitch) {
		this.m_user_agent = user_agent;
		this.m_server_url = serverUrl || 'http://localhost';
		this.m_mock = mock;
		this.m_mock_switch = mockSwitch;
	}

	get user_agent() { return this.m_user_agent }
	set user_agent(v) { this.m_user_agent = v }
	get server_url() { return this.m_server_url }
	set server_url(v) { this.m_server_url = v }
	get mock() { return this.m_mock }
	set mock(v) { this.m_mock = v }
	get mock_switch() { return this.m_mock_switch }
	set mock_switch(v) { this.m_mock_switch = v }

	parse_resonse_data(buf) {
		var json = buf.toString('utf8');
		// console.log(json);
		return JSON.parse(json);
	}

	request(name, method, params) {
    return new Promise((resolve, reject)=> {
			params = params || {};

			if (this.m_mock[name] && this.m_mock_switch[name]) {
				setTimeout(()=> {
					resolve({...this.m_mock[name]});
				}, 1);
			} else {

				var uri = url.parse(this.m_server_url + '/' + name + '?_=' + new Date().valueOf());
				var is_https = uri.protocol == 'https:';
				var lib =	is_https ? https: http;
				var port = Number(uri.port) || (is_https ? 443: 80);
		    var send_data = querystring.stringify(params);
		    var path = uri.path;
		    var headers = { 'User-Agent': this.m_user_agent };

				if (method == 'GET') {
					path += (uri.search ? '&' : '?') + send_data;
				} else {
					headers['Content-Type'] = 'application/x-www-form-urlencoded';
					headers['Content-Length'] = Buffer.byteLength(send_data);
				}

				var options = {
				  hostname: uri.hostname,
				  port: port,
				  path: path,
				  method: method,
				  headers: headers,
				  rejectUnauthorized: false
				};
				
				if (is_https) {
					options.agent = new https.Agent(options);
				}

				const req = lib.request(options, (res)=> {
				  // console.log(`STATUS: ${res.statusCode}`);
				  // console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
				  // res.setEncoding('utf8');
				  var data = null;
				  res.on('data', (chunk)=> {
				  	// console.log(`BODY: ${chunk}`);
				  	if (data) {
				  		data = Buffer.concat([data, chunk]);
				  	} else {
				  		data = chunk;
				  	}
				  });
				  res.on('end', ()=> {
				    // console.log('No more data in response.');
						resolve(this.parse_resonse_data(data));
				  });
				});

				req.on('error', (e)=> {
				  // console.error(`problem with request: ${e.message}`);
				  reject(e);
				});

				// write data to request body
				if (method == 'POST') {
					req.write(send_data);
				}
				req.end();
			}
    });
	}

	get(name, params) {
		return this.request(name, 'GET', params);
	}

	post(name, params) {
		return this.request(name, 'POST', params);
	}
}

exports.Request = Request;
